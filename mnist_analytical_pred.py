# -*- coding: utf-8 -*-
"""MNIST_Analytical_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BnlTUpH5rCBpUMF57tEKR4Emyo9iQ9XI

Reading the Data
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = tf.keras.datasets.mnist.load_data()

data_train, label_train = data[0]
data_test, label_test = data[1]
print(data_train.shape)
print(label_train.shape)
print(data_test.shape)
print(label_test.shape)

import matplotlib.pyplot as plt
for index in range (20):
  plt.subplot(4,5,index+1)
  plt.imshow(data_train[index], cmap =  'gray')

"""Data preprocessing"""

x_tr = np.reshape(data_train, newshape = (data_train.shape[0], 28*28))
x_te = np.reshape(data_test, newshape = (data_test.shape[0], 28*28))

print(x_tr.shape)
print(x_te.shape)

x_tr = (x_tr - 127.5)/127.5
x_te = (x_te - 127.5)/127.5

print(np.amin(x_tr[0]), np.amax(x_tr[0]))

y_tr = np.zeros((label_train.shape[0], label_train.max() +1))
y_tr[np.arange(label_train.shape[0]), label_train] = 1

y_te = np.zeros((label_test.shape[0], label_train.max() +1))
y_te[np.arange(label_test.shape[0]), label_test] = 1

print(y_tr.shape)

print(y_tr[0])
print(y_te[0])

"""Building the model"""

mu_x = x_tr.mean(axis = 0)
mu_y = y_tr.mean(axis = 0)

x_tr_sub = x_tr - mu_x
y_tr_sub = y_tr - mu_y
x_te_sub = x_te - mu_x
x_te_sub = y_te - mu_y

cov_tr = x_tr_sub.T.dot(x_tr_sub)
print("Cov(Shape): {}".format(cov_tr.shape))
print("Cov: \n {}".format(cov_tr))

eig_values, eig_vectors = np.linalg.eig(cov_tr)

eig_values = np.real(eig_values)
eig_vectors = np.real(eig_vectors)
print("Eigen Values (Shape): {}".format(eig_values.shape))
print("Eigen Vectors (Shape): {}".format(eig_vectors.shape))

eig_error = eig_vectors.dot(np.diag(eig_values)).dot(eig_vectors.T) - cov_tr
print("Error: \n {}".format(eig_error))

print("Eigen Min & Max: {}, {}".format(eig_values.min(), eig_values.max()))

regularization_coef = 0.0001
prec_tr = eig_vectors.dot(np.diag(1./(eig_values + regularization_coef))).dot(eig_vectors.T)

inv_error = prec_tr.dot(cov_tr + regularization_coef * np.eye(cov_tr.shape[0])) - np.eye(cov_tr.shape[0])
print(inv_error)

"""Training the model"""

w = prec_tr.dot(x_tr_sub.T).dot(y_tr_sub)
b = mu_y - mu_x.dot(w)
print(w.max(),w.min())
print(b)

"""Evaluating the model"""

y_tr_pred = x_tr.dot(w) + b
print(y_tr_pred[0])
label_tr_pred = y_tr_pred.argmax(axis = 1)

acc_tr = np.sum(label_train == label_tr_pred)/label_train.shape[0]
print('Training accuracy is', acc_tr)

y_te_pred = x_te.dot(w) + b
print(y_te_pred[0])
label_te_pred = y_te_pred.argmax(axis = 1)

acc_te = np.sum(label_test == label_te_pred)/label_test.shape[0]
print('Test accuracy is', acc_te)